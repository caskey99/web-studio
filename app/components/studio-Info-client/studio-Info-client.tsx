'use client'

import { useEffect, useRef } from 'react'
import styles from '../../page.module.scss';

/**
 * StudioInfoClient - –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
 */
export default function StudioInfoClient() {
  const cardRefs = useRef<(HTMLDivElement | null)[]>([])
  
  useEffect(() => {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    }
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement
          element.style.transform = 'translateY(0)'
          element.style.opacity = '1'
        }
      })
    }, observerOptions)
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
    cardRefs.current.forEach((card) => {
      if (card) {
        card.style.transform = 'translateY(30px)'
        card.style.opacity = '0'
        card.style.transition = 'all 0.6s ease'
        observer.observe(card)
      }
    })
    
    return () => observer.disconnect()
  }, [])

  const cards = [
    {
      icon: 'üöÄ',
      title: '–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
      description: '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã—Ö –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–æ–≤'
    },
    {
      icon: 'üéØ',
      title: 'SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
      description: '–ö–∞–∂–¥—ã–π —Å–∞–π—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏'
    },
    {
      icon: 'üì±',
      title: '–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω',
      description: '–ò–¥–µ–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö - –æ—Ç —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤ –¥–æ –±–æ–ª—å—à–∏—Ö –º–æ–Ω–∏—Ç–æ—Ä–æ–≤'
    }
  ]

  return (
    <section className={styles.studioInfo}>
      <div className={styles.container}>
        <h2 className={styles.studioTitle}>
          –ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å?
        </h2>
        
        <p className={styles.studioDescription}>
          –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–µ–±-—Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–∏–≤–æ –≤—ã–≥–ª—è–¥—è—Ç, 
          –Ω–æ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.
        </p>
        
        <div className={styles.cardsGrid}>
          {cards.map((card, index) => (
            <div
              key={index}
              ref={(el) => cardRefs.current[index] = el}
              className={styles.card}
              onMouseEnter={(e) => {
                e.currentTarget.style.transform = 'translateY(-10px) scale(1.02)'
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = 'translateY(0) scale(1)'
              }}
            >
              <div className={styles.cardIcon}>
                {card.icon}
              </div>
              <h3 className={styles.cardTitle}>
                {card.title}
              </h3>
              <p className={styles.cardDescription}>
                {card.description}
              </p>
            </div>
          ))}
        </div>
      </div>
    </section>
  )
}